<svg xmlns="http://www.w3.org/2000/svg" width="300" height="300" viewBox="-24 -24 48 48">
  <style>
    text {
      font-family: sans-serif;
      fill: black;
      font-size: 4px;
      text-anchor: middle;
    }

    #needle rect {
      fill: #0000A0;
    }

    #needle {
      transition: transform 0.5s;
    }
  </style>
  <g id="panel" transform="translate(0, 10)"></g>
  <g id="needle" transform="translate(0, 10) rotate(0)">
    <rect width="10" height="1" x="-21" y="-0.5" />
  </g>

  <g>
    <text id="title" x="0" y="-18"></text>
    <text id="minimum" x="-16" y="13" style="font-size:3px"></text>
    <text id="maximum" x="16" y="14" style="font-size:3px"></text>
    <text id="value" x="0" y="12" style="font-size:8px"></text>
    <text id="units" x="0" y="18"></text>
  </g>

  <script type="application/ecmascript">
    // Micro charts implementation utilities.

    function createSVGNode(parentNode, tagName, attr, txt) {
      var n = document.createElementNS("http://www.w3.org/2000/svg", tagName);
      if (attr) {
        Object.getOwnPropertyNames(attr).forEach(function(p) {
          n.setAttribute(p, attr[p]);
        });
      }
      if (txt) { n.textContent = txt; }
      parentNode.appendChild(n);
      return (n);
    } // createSVGNode()

    function _removeChilds(p) {
      Array.from(p.childNodes).forEach(function (c) {
        c.remove();
      });
    } // _removeChilds()

    // Calculate a point on a circle
    function _cPoint(alpha, r) {
      return ({
        x: (Math.sin(alpha) * r),
        y: (-Math.cos(alpha) * r)
      });
    } // _cPoint()
  </script>
  <script type="application/ecmascript">
    <![CDATA[
    // Gauge-Chart micro charts implementation.
      const RAD_OUT = 20;
      const RAD_IN = 12;

      const panelObj = document.querySelector("#panel");
      const needleObj = document.querySelector("#needle");

      // Calculate an outer point on the circle, usable for svg paths
      function _piePoint(alpha, r) {
        var p = _cPoint(alpha, r);
        return (p.x + "," + p.y);
      } // _piePoint()


      function _drawSegment(start, end, color) {
        var alpha = Math.PI * (start - 0.5);
        var beta = Math.PI * (end - 0.5);
        var p = "";

        p += "M" + _piePoint(alpha, RAD_OUT);
        p += "A" + RAD_OUT + "," + RAD_OUT;
        p += " 0 0 1 ";
        p += _piePoint(beta, RAD_OUT);

        p += "L" + _piePoint(beta, RAD_IN);
        p += "A" + RAD_IN + "," + RAD_IN;
        p += " 0 0 0 ";
        p += _piePoint(alpha, RAD_IN);
        p += "Z";

        var pNode = createSVGNode(panelObj, "path", {
          class: "segment",
          style: "fill: " + color,
          d: p
        });
      }

      // expose API functions.
      document['api'] = {
        setOptions: function (opts) {
          this.options = Object.assign({}, this.defaultOptions, opts);

          // set text
          document.querySelector('#title').textContent = this.options.title;
          document.querySelector('#minimum').textContent = this.options.minimum;
          document.querySelector('#maximum').textContent = this.options.maximum;
          document.querySelector('#units').textContent = this.options.units;

          // draw segments
          _removeChilds(panelObj);
          var r = (this.options.maximum - this.options.minimum);
          var v = this.options.minimum;
          this.options.segments.forEach(seg => {
            var h = seg.value || this.options.maximum;
            _drawSegment(
              (v - this.options.minimum) / r,
              (h - this.options.minimum) / r,
              seg.color);
            v = h;
          });
        }, // setOptions()

        draw: function (value) {
          var valueObj = document.querySelector('#value');
          var v = Number(value);
          var r;

          if ((value == null) || isNaN(value)) {
            r = -20;
            valueObj.textContent = '';

          } else if (v < this.options.minimum) {
            r = -20;
            valueObj.textContent = value;

          } else if (v > this.options.maximum) {
            r = 200;
            valueObj.textContent = value;

          } else {
            // calc rotation
            r = 180 * (v - this.options.minimum) / (this.options.maximum - this.options.minimum);
            // set text
            valueObj.textContent = value;
          }

          // set needle
          var rotate = document.documentElement.createSVGTransform();
          rotate.setRotate(r, 0, 0);
          needleObj.transform.baseVal.replaceItem(rotate, 1);
        }, // _draw()  


        // Clear the output value. No value text, needle in outside position.
        clear: function () {
          this.draw(null);
        }, // _clear()

        defaultOptions: {
          segments: [
            {
              color: '#4040ff'
            }
          ]
        }
      };
    ]]>
  </script>
</svg>
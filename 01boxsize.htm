<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Box sizing model</title>
  <link Content-Type="text/css" href="advent2021.css" rel="stylesheet" />
</head>

<body>
  <a class="back" href="javascript:history.back()"></a>
  <h1>Box sizing model</h1>

  <fieldset>
    <legend>Excerpt</legend>
    <p><b>Question:</b> How to specify the size of a HTML Element in CSS ?</p>
    <p><b>Answer:</b> It depends.</p>
  </fieldset>

  <p>There are 2 methods available:</p>

  <h3>content-box model</h3>

  <p>The <b>content-box</b> was created first and the calculation is given by</p>

  <pre><code>
Total width = object width + padding left + padding right + border left + border right;
Total height = object height + padding top + padding bottom + border top + border bottom;
</code></pre>

  <p>The problem with this model is that specifying the height is not actually specifying the height. I found it somehow
    un-normal.
    As an example when changing the border or padding style in a CSS rule you have to check all elements to adjust the
    width and height of the relevant elements.
  <p>

  <h3>border-box model</h3>

  <p>The <b>border-box</b> was created in about 2012 and was adopted in browsers since then and calculation is given by
  </p>

  <pre><code>
Total width = object width;
Total height = object height;
</code></pre>

  <p>Quite simple. The border and padding is included inside the the specified width and height.</p>

  <h3>Implementation</h3>

  <p>The box sizing model can be specified on each html element by using the <code>box-sizing</code> CSS attribute.</p>

  <p>To set the box sizing model on a global level the following CSS can be used:</p>

  <pre><code>
html {
  box-sizing: border-box;
}

*, *:before, *:after {
  box-sizing: inherit;
}
</code></pre>

  <p>This allows converting to the content-box model on a HTML container element in case you need to.</p>


  <h3>Always border-box model ?</h3>

  <p>Not so fast.
    There is still some dependency and the content-box model is helpful when specifying text containing elements. Here
    is
    an example of a button implementation with such a problem:</p>

  <pre><code>&lt;button style="height:1em;font-size:1em;line-height:1em"&gt;Click me&lt;/button&gt;</code></pre>

  <p><button style="height:1em;font-size:1em;line-height:1em">Click me</button></p>

  <p>When enforcing a specific height (or width) the available space for the text depends on the given border and
    padding.
    Using the content-box on these elements is simplifying this inner-out requirement. When using a flex layout the
    outer-in model fits better.</p>
  <p>Because the object margins are not included you still have the chance to get layout problems based on this and the
    border-box model is not helping here.</p>

  <p>My (personal) preference is to use the border-box model and not to use borders at all. But there are buttons...</p>

  <h2>See also</h2>

  <ul>
    <li><a
        href="https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing">https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing</a>
    </li>
    <li><a
        href="https://www.w3schools.com/csS/css3_box-sizing.asp">https://www.w3schools.com/csS/css3_box-sizing.asp</a>
    </li>
    <li><a href="https://css-tricks.com/box-sizing/">https://css-tricks.com/box-sizing/</a></li>
    <li><a href="https://caniuse.com/css3-boxsizing">https://caniuse.com/css3-boxsizing</a></li>
  </ul>

  <h2>Tags</h2>
  <div class="taglist"><a href="tag-css.htm">CSS</a></div>

</body>

</html>